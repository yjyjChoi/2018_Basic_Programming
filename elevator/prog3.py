{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "input num_of_floors:3\n",
      "input num_of_customers:5\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Customer 1 -> Elevator\n",
      "Customer 2 -> Elevator\n",
      "\n",
      "Elevator's Current Floor : 1      Elevator's direction: up\n",
      "Customers:\n",
      "      Customer 1         current floor : 1         destination floor : 2\n",
      "                         in Elevator : True       is Finished : False\n",
      "      Customer 2         current floor : 1         destination floor : 2\n",
      "                         in Elevator : True       is Finished : False\n",
      "      Customer 3         current floor : 2         destination floor : 3\n",
      "                         in Elevator : False       is Finished : False\n",
      "      Customer 4         current floor : 3         destination floor : 2\n",
      "                         in Elevator : False       is Finished : False\n",
      "      Customer 5         current floor : 2         destination floor : 1\n",
      "                         in Elevator : False       is Finished : False\n",
      "\n",
      "->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->\n",
      "\n",
      "Elevator :  1  ->  2\n",
      "Customer 3 -> Elevator\n",
      "Customer 5 -> Elevator\n",
      "Customer 1 -> Destination Floor\n",
      "Customer 2 -> Destination Floor\n",
      "\n",
      "Elevator's Current Floor : 2      Elevator's direction: up\n",
      "Customers:\n",
      "      Customer 1         current floor : 1         destination floor : 2\n",
      "                         in Elevator : False       is Finished : True\n",
      "      Customer 2         current floor : 1         destination floor : 2\n",
      "                         in Elevator : False       is Finished : True\n",
      "      Customer 3         current floor : 2         destination floor : 3\n",
      "                         in Elevator : True       is Finished : False\n",
      "      Customer 4         current floor : 3         destination floor : 2\n",
      "                         in Elevator : False       is Finished : False\n",
      "      Customer 5         current floor : 2         destination floor : 1\n",
      "                         in Elevator : True       is Finished : False\n",
      "\n",
      "->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->\n",
      "\n",
      "Elevator :  2  ->  3\n",
      "Customer 4 -> Elevator\n",
      "Customer 3 -> Destination Floor\n",
      "\n",
      "Elevator's Current Floor : 3      Elevator's direction: up\n",
      "Customers:\n",
      "      Customer 1         current floor : 1         destination floor : 2\n",
      "                         in Elevator : False       is Finished : True\n",
      "      Customer 2         current floor : 1         destination floor : 2\n",
      "                         in Elevator : False       is Finished : True\n",
      "      Customer 3         current floor : 2         destination floor : 3\n",
      "                         in Elevator : False       is Finished : True\n",
      "      Customer 4         current floor : 3         destination floor : 2\n",
      "                         in Elevator : True       is Finished : False\n",
      "      Customer 5         current floor : 2         destination floor : 1\n",
      "                         in Elevator : True       is Finished : False\n",
      "\n",
      "->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->\n",
      "\n",
      "The Elevator is on the Top Floor Now\n",
      "Elevator :  3  ->  2\n",
      "Customer 4 -> Destination Floor\n",
      "\n",
      "Elevator's Current Floor : 2      Elevator's direction: down\n",
      "Customers:\n",
      "      Customer 1         current floor : 1         destination floor : 2\n",
      "                         in Elevator : False       is Finished : True\n",
      "      Customer 2         current floor : 1         destination floor : 2\n",
      "                         in Elevator : False       is Finished : True\n",
      "      Customer 3         current floor : 2         destination floor : 3\n",
      "                         in Elevator : False       is Finished : True\n",
      "      Customer 4         current floor : 3         destination floor : 2\n",
      "                         in Elevator : False       is Finished : True\n",
      "      Customer 5         current floor : 2         destination floor : 1\n",
      "                         in Elevator : True       is Finished : False\n",
      "\n",
      "->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->\n",
      "\n",
      "Elevator :  2  ->  1\n",
      "Customer 5 -> Destination Floor\n",
      "\n",
      "Elevator's Current Floor : 1      Elevator's direction: down\n",
      "Customers:\n",
      "      Customer 1         current floor : 1         destination floor : 2\n",
      "                         in Elevator : False       is Finished : True\n",
      "      Customer 2         current floor : 1         destination floor : 2\n",
      "                         in Elevator : False       is Finished : True\n",
      "      Customer 3         current floor : 2         destination floor : 3\n",
      "                         in Elevator : False       is Finished : True\n",
      "      Customer 4         current floor : 3         destination floor : 2\n",
      "                         in Elevator : False       is Finished : True\n",
      "      Customer 5         current floor : 2         destination floor : 1\n",
      "                         in Elevator : False       is Finished : True\n",
      "\n",
      "->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->\n",
      "\n",
      "\n",
      "\n",
      "All Customers Arrived at Destination\n"
     ]
    }
   ],
   "source": [
    "# Homework Assignment 3 \n",
    "# Name: 최윤정 \n",
    "# Time Spent: 6days \n",
    "\n",
    "import random\n",
    "#print (random.randint(1,100))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "class Building(object):\n",
    "    def __init__(self, num_of_customers, num_of_floors, elevator, customer):\n",
    "        self.num_of_floors = num_of_floors\n",
    "        self.num_of_customers = num_of_customers\n",
    "        self.elevator = elevator\n",
    "        self.customer = customer\n",
    "        self.elevator.register_customer(self.customer)\n",
    "        self.elevator.cancel_customer(self.customer)\n",
    "\n",
    "    def run(self):#The method to operate the elevator\n",
    "        self.elevator.move()\n",
    "        self.elevator.register_customer(self.customer)\n",
    "        self.elevator.cancel_customer(self.customer)\n",
    "\n",
    "    def output(self, elevator, customer):#Output the building\n",
    "        print()\n",
    "        print(\"Elevator's Current Floor : \"+ str(elevator.cur_floor)+\n",
    "              \"      Elevator's direction: \"+elevator.direction)\n",
    "        print(\"Customers:\")\n",
    "        for i in range(self.num_of_customers):\n",
    "            print(\"      Customer \"+str(i+1)\n",
    "                  + \"         current floor : \"+str(customer.cur_floor[i]) \n",
    "                  + \"         destination floor : \"+ str(customer.dst_floor[i]))\n",
    "            print(\"                         in Elevator : \" + str(self.customer.in_elevator[i]) \n",
    "                  + \"       is Finished : \" + str(self.customer.finished[i]))\n",
    "\n",
    "        print('\\n'+\"->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->\")\n",
    "        print()\n",
    "        \n",
    "        \n",
    "        \n",
    "class Elevator(object):\n",
    "    def __init__(self, num_of_floors):\n",
    "        self.num_of_floors=num_of_floors\n",
    "        self.cur_floor = 1\n",
    "        self.direction = \"up\"\n",
    "\n",
    "    def move(self):#The method to move the elevator by 1 floor\n",
    "        if self.cur_floor == num_of_floors:\n",
    "            print(\"The Elevator is on the Top Floor Now\")\n",
    "            self.direction = \"down\"\n",
    "\n",
    "        if self.cur_floor == 1 and self.direction == \"down\":\n",
    "            print('\\n'+'\\n'+\"All Customers Arrived at Destination\")\n",
    "\n",
    "\n",
    "        if self.direction == \"up\":\n",
    "            print(\"Elevator : \", self.cur_floor, \" -> \", self.cur_floor+1)\n",
    "            self.cur_floor += 1\n",
    "\n",
    "        else:\n",
    "            if self.direction == \"down\" and self.cur_floor != 1:\n",
    "                print(\"Elevator : \", self.cur_floor, \" -> \", self.cur_floor - 1)\n",
    "            self.cur_floor = self.cur_floor-1\n",
    "\n",
    "    def register_customer(self, customer):#A customer goes into the elevator\n",
    "        for i in range(len(customer.cur_floor)):\n",
    "            if customer.cur_floor[i] == self.cur_floor and (customer.in_elevator[i] == False \n",
    "                                        and customer.finished[i] == False):\n",
    "                customer.in_elevator[i] = True\n",
    "                print(\"Customer \"+str(i+1)+\" -> \"+\"Elevator\")\n",
    "                \n",
    "    def cancel_customer(self, customer):#A customer goes out of the elevator \n",
    "        for i in range(len(customer.dst_floor)):\n",
    "            if customer.dst_floor[i] == self.cur_floor and (customer.in_elevator[i] == True\n",
    "                                        and customer.finished[i] == False):\n",
    "                customer.in_elevator[i] = False\n",
    "                customer.finished[i] = True\n",
    "                print(\"Customer \"+str(i+1)+\" -> \"+\"Destination Floor\")\n",
    "\n",
    "   \n",
    "\n",
    "\n",
    "class Customer(object):\n",
    "    def __init__(self, num_of_floors, num_of_customers):\n",
    "        self.cur_floor = []\n",
    "        self.dst_floor = []\n",
    "        self.ID = []\n",
    "        self.in_elevator = []\n",
    "        self.finished = []\n",
    "\n",
    "        for i in range(num_of_customers):\n",
    "            curfloor = random.randint(1, num_of_floors)\n",
    "            dstfloor = random.randint(1, num_of_floors)\n",
    "            if curfloor == dstfloor:\n",
    "                while(1):\n",
    "                    dstfloor = random.randint(1, num_of_floors)\n",
    "                    if dstfloor != curfloor:\n",
    "                        break\n",
    "            self.cur_floor.append(curfloor)\n",
    "            self.dst_floor.append(dstfloor)\n",
    "\n",
    "        for i in range(num_of_customers):\n",
    "            self.ID.append(i+1)\n",
    "            \n",
    "        for i in range(num_of_customers):\n",
    "            self.in_elevator.append(False)\n",
    "            self.finished.append(False)\n",
    "\n",
    "            \n",
    "            \n",
    "            \n",
    "if __name__ ==\"__main__\":\n",
    "    while(1):\n",
    "        num_of_floors = input(\"input num_of_floors:\")\n",
    "        try:\n",
    "            num_of_floors = int(num_of_floors)\n",
    "            if num_of_floors > 0:\n",
    "                break\n",
    "            else:\n",
    "                raise ValueError\n",
    "        except ValueError:\n",
    "            print(\"Wrong Input!!!\")\n",
    "\n",
    "    while(1):\n",
    "        num_of_customers = input(\"input num_of_customers:\")\n",
    "        try:\n",
    "            num_of_customers = int(num_of_customers)\n",
    "            if num_of_customers > 0:\n",
    "                break\n",
    "            else:\n",
    "                raise ValueError\n",
    "        except ValueError:\n",
    "            print(\"Wrong Input!!!\")\n",
    "    print()\n",
    "    print()\n",
    "    print()\n",
    "    print()\n",
    "\n",
    "    \n",
    "elevator = Elevator(num_of_floors)\n",
    "customer = Customer(num_of_floors, num_of_customers)\n",
    "building = Building(num_of_customers, num_of_floors, elevator, customer)\n",
    "\n",
    "\n",
    "\n",
    "while(1):\n",
    "    building.output(elevator, customer)\n",
    "    building.run()\n",
    "    if elevator.cur_floor == 0 and elevator.direction == \"down\":\n",
    "        break"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
